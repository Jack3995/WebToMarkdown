package com.jack3995.webtomarkdown.util

import android.content.ContentResolver
import android.content.Context
import android.net.Uri
import androidx.core.net.toUri
import androidx.documentfile.provider.DocumentFile
import com.jack3995.webtomarkdown.screens.SaveLocationOption
import com.jack3995.webtomarkdown.screens.FileNameOption
import kotlinx.coroutines.*
import java.io.File
import java.text.SimpleDateFormat
import java.util.*

class FileSaveHandler(private val context: Context, private val contentResolver: ContentResolver) {

    var lastCustomFolderUri: String? = null
    private val processor = WebContentProcessor()

    // Pending state for ASK_EVERY_TIME flow
    private var pendingFileName: String? = null
    private var pendingContent: String? = null
    private var pendingImagesFolder: File? = null
    private var pendingImagesDirName: String? = null

    /**
     * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏.
     * –î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ, —á–µ—Ä–µ–∑ SAF –∏–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏.
     * –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–æ–±—â–∞–µ—Ç —á–µ—Ä–µ–∑ onSaveResult.
     */
    fun saveNote(
        fileName: String,
        content: String,
        saveLocationOption: SaveLocationOption,
        onFolderPickerRequest: () -> Unit,
        onSaveResult: (Boolean) -> Unit,
        imagesFolder: File? = null,
        imagesDirName: String? = null
    ) {
        when (saveLocationOption) {
            SaveLocationOption.ASK_EVERY_TIME -> onFolderPickerRequest()
            SaveLocationOption.CUSTOM_FOLDER -> {
                val uriStr = lastCustomFolderUri
                if (!uriStr.isNullOrBlank()) {
                    val uri = uriStr.toUri()
                    val success = saveNoteToSAF(uri, fileName, content, imagesFolder, imagesDirName)
                    onSaveResult(success)
                } else {
                    // –ü–∞–ø–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞ - –∑–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏
                    onFolderPickerRequest()
                }
            }
        }
    }

    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π.
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ —Å–æ–æ–±—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
     */
    fun onFolderPicked(folderUri: Uri?, fileName: String, content: String, onSaveResult: (Boolean) -> Unit, imagesFolder: File? = null, imagesDirName: String? = null) {
        if (folderUri == null) {
            onSaveResult(false)
            return
        }
        lastCustomFolderUri = folderUri.toString()
        val success = saveNoteToSAF(folderUri, fileName, content, imagesFolder, imagesDirName)
        onSaveResult(success)
    }

    /**
     * Completes save using previously stored pending values (ASK_EVERY_TIME flow).
     */
    fun onFolderPickedUsePending(folderUri: Uri?, onSaveResult: (Boolean) -> Unit) {
        if (folderUri == null) {
            onSaveResult(false)
            return
        }
        val fileName = pendingFileName
        val content = pendingContent
        val images = pendingImagesFolder
        val imagesDir = pendingImagesDirName
        if (fileName.isNullOrBlank() || content == null) {
            println("‚ùå –ù–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            onSaveResult(false)
            return
        }
        println("üîç onFolderPickedUsePending: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        println("   –§–∞–π–ª: $fileName")
        println("   –ö–æ–Ω—Ç–µ–Ω—Ç: ${content.length} —Å–∏–º–≤–æ–ª–æ–≤")
        println("   –ü–∞–ø–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${images?.absolutePath}")
        println("   –ò–º—è –ø–∞–ø–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: $imagesDir")
        lastCustomFolderUri = folderUri.toString()
        val success = saveNoteToSAF(folderUri, fileName, content, images, imagesDir)
        // clear pending
        pendingFileName = null
        pendingContent = null
        pendingImagesFolder = null
        pendingImagesDirName = null
        onSaveResult(success)
    }

    private fun saveNoteToSAF(folderUri: Uri, fileName: String, content: String, imagesFolder: File? = null, imagesDirName: String? = null): Boolean {
        val pickedDir = DocumentFile.fromTreeUri(context, folderUri) ?: return false
        val safeFileName = if (fileName.endsWith(".md")) fileName else "$fileName.md"
        val newFile = pickedDir.createFile("text/markdown", safeFileName) ?: return false

        contentResolver.openOutputStream(newFile.uri)?.use { out ->
            out.write(content.toByteArray())
        } ?: return false

        println("üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω —á–µ—Ä–µ–∑ SAF –≤: ${newFile.uri}")
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if (imagesFolder != null) {
            if (imagesFolder.exists() && imagesFolder.isDirectory) {
                println("üñºÔ∏è –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${imagesFolder.absolutePath}")
                // –ï—Å–ª–∏ –∏–º—è —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –µ–≥–æ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                val targetDirName = imagesDirName ?: safeFileName.removeSuffix(".md") + "_images"
                saveImagesFolderToSAF(pickedDir, imagesFolder, targetDirName)
                // –ß–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                try {
                    imagesFolder.deleteRecursively()
                    println("üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —É–¥–∞–ª–µ–Ω–∞")
                } catch (e: Exception) {
                    println("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É: ${e.message}")
                }
            } else {
                println("‚ö†Ô∏è –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${imagesFolder.absolutePath}")
            }
        } else {
            println("‚ÑπÔ∏è –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        }
        
        return true
    }




    
    /**
     * –ö–æ–ø–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ SAF
     */
    private fun saveImagesFolderToSAF(pickedDir: DocumentFile, imagesFolder: File, imagesDirName: String? = null) {
        try {
            println("üñºÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞–ø–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${imagesFolder.absolutePath}")
            
            // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            val targetDirName = imagesDirName ?: imagesFolder.name
            val imagesDir = pickedDir.createDirectory(targetDirName) ?: run {
                println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                return
            }
            
            println("üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imagesDir.name}")
            
            // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            val imageFiles = imagesFolder.listFiles()
            if (imageFiles.isNullOrEmpty()) {
                println("‚ö†Ô∏è –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –ø—É—Å—Ç–∞")
                return
            }
            
            println("üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imageFiles.size}")
            
            imageFiles.forEach { imageFile ->
                try {
                    val mimeType = getMimeType(imageFile.name)
                    println("üì∏ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${imageFile.name} (—Ç–∏–ø: $mimeType)")
                    
                    val newFile = imagesDir.createFile(mimeType, imageFile.name) ?: run {
                        println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª: ${imageFile.name}")
                        return@forEach
                    }
                    
                    contentResolver.openOutputStream(newFile.uri)?.use { out ->
                        imageFile.inputStream().use { input ->
                            input.copyTo(out)
                        }
                    }
                    println("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${imageFile.name}")
                } catch (e: Exception) {
                    println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${imageFile.name}: ${e.message}")
                }
            }
            
            println("üéâ –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–ø–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${e.message}")
            e.printStackTrace()
        }
    }
    

    
    /**
     * –ü–æ–ª–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –≤—Å–µ–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏.
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ MainActivity –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
     */
    fun saveNoteWithFullLogic(
        fileName: String,
        content: String,
        saveLocationOption: SaveLocationOption,
        fileNameOption: FileNameOption,
        downloadImages: Boolean,
        usePatterns: Boolean,
        originalUrl: String,
        tempImagesFolder: File?,
        onFolderPickerRequest: () -> Unit,
        onSaveResult: (Boolean) -> Unit
    ) {
        println("üíæ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏")
        println("   –§–∞–π–ª: $fileName")
        println("   –û–ø—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: $saveLocationOption")
        println("   –ó–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $downloadImages")
        println("   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã: $usePatterns")
        println("   –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL: $originalUrl")
        println("   –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${tempImagesFolder?.absolutePath ?: "–Ω–µ—Ç"}")

        val finalFileName = fileName.ifBlank {
            if (fileNameOption == FileNameOption.DEFAULT_NAME) processor.getDefaultFileName()
            else "page_${System.currentTimeMillis()}.md"
        }

        println("üíæ –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: $finalFileName")

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        if (tempImagesFolder != null && tempImagesFolder.exists()) {
            println("üìÅ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–∞–π–¥–µ–Ω–∞: ${tempImagesFolder.name}")
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ markdown –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏
            println("üîÑ –í—ã–∑—ã–≤–∞–µ–º updateMarkdownImageLinks...")
            val updatedMarkdown = processor.updateMarkdownImageLinks(content, finalFileName)
            println("üìù Markdown –æ–±–Ω–æ–≤–ª–µ–Ω —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º")

            if (saveLocationOption == SaveLocationOption.ASK_EVERY_TIME) {
                // Store pending and trigger folder picker
                println("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ASK_EVERY_TIME")
                pendingFileName = finalFileName
                pendingContent = updatedMarkdown
                pendingImagesFolder = tempImagesFolder
                pendingImagesDirName = "${finalFileName}_images"
                println("   –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: $pendingFileName")
                println("   –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: ${pendingContent?.length} —Å–∏–º–≤–æ–ª–æ–≤")
                println("   –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: ${pendingImagesFolder?.absolutePath}")
                println("   –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –∏–º—è –ø–∞–ø–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: $pendingImagesDirName")
                onFolderPickerRequest()
            } else {
                // CUSTOM_FOLDER: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ä–∞–∑—É
                saveNote(
                    finalFileName,
                    updatedMarkdown,
                    saveLocationOption,
                    onFolderPickerRequest = onFolderPickerRequest,
                    onSaveResult = { success ->
                        if (!success) {
                            println("‚ùó –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏")
                        } else {
                            println("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                        }
                        onSaveResult(success)
                    },
                    imagesFolder = tempImagesFolder,
                    imagesDirName = "${finalFileName}_images"
                )
            }
        } else {
            println("‚ÑπÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–∞–ª–∏—Å—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫—É –±–µ–∑ –Ω–∏—Ö")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            saveNote(
                finalFileName,
                content,
                saveLocationOption,
                onFolderPickerRequest = {
                    println("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏:")
                    println("   –§–∞–π–ª: $finalFileName")
                    println("   –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: –Ω–µ—Ç")
                    onFolderPickerRequest()
                },
                onSaveResult = { success ->
                    if (!success) {
                        println("‚ùó –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏")
                    } else {
                        println("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                    }
                    onSaveResult(success)
                },
                imagesFolder = null
            )
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç MIME-—Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
     */
    private fun getMimeType(fileName: String): String {
        return when (fileName.substringAfterLast('.', "").lowercase()) {
            "jpg", "jpeg" -> "image/jpeg"
            "png" -> "image/png"
            "gif" -> "image/gif"
            "bmp" -> "image/bmp"
            "webp" -> "image/webp"
            "svg" -> "image/svg+xml"
            else -> "application/octet-stream"
        }
    }
}