package com.jack3995.webtomarkdown.util

import android.content.ContentResolver
import android.content.Context
import android.net.Uri
import android.os.Environment
import androidx.core.net.toUri
import androidx.documentfile.provider.DocumentFile
import com.jack3995.webtomarkdown.screens.SaveLocationOption
import java.io.File

class FileSaveHandler(private val context: Context, private val contentResolver: ContentResolver) {

    var lastCustomFolderUri: String? = null

    /**
     * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏.
     * –î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ, —á–µ—Ä–µ–∑ SAF –∏–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏.
     * –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–æ–±—â–∞–µ—Ç —á–µ—Ä–µ–∑ onSaveResult.
     */
    fun saveNote(
        fileName: String,
        content: String,
        saveLocationOption: SaveLocationOption,
        onFolderPickerRequest: () -> Unit,
        onSaveResult: (Boolean) -> Unit
    ) {
        when (saveLocationOption) {
            SaveLocationOption.ASK_EVERY_TIME -> onFolderPickerRequest()
            SaveLocationOption.DOWNLOADS -> {
                val dir = getDownloadsDirectory()
                val success = saveToFileCustomDir(dir, fileName, content)
                onSaveResult(success)
            }
            SaveLocationOption.CUSTOM_FOLDER -> {
                val uriStr = lastCustomFolderUri
                if (!uriStr.isNullOrBlank()) {
                    val uri = uriStr.toUri()
                    val success = saveNoteToSAF(uri, fileName, content)
                    onSaveResult(success)
                } else {
                    // –ü–∞–ø–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞ - –∑–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏
                    onFolderPickerRequest()
                }
            }
        }
    }

    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π.
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ —Å–æ–æ–±—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
     */
    fun onFolderPicked(folderUri: Uri?, fileName: String, content: String, onSaveResult: (Boolean) -> Unit) {
        if (folderUri == null) {
            onSaveResult(false)
            return
        }
        lastCustomFolderUri = folderUri.toString()
        val success = saveNoteToSAF(folderUri, fileName, content)
        onSaveResult(success)
    }

    private fun saveNoteToSAF(folderUri: Uri, fileName: String, content: String): Boolean {
        val pickedDir = DocumentFile.fromTreeUri(context, folderUri) ?: return false
        val safeFileName = if (fileName.endsWith(".md")) fileName else "$fileName.md"
        val newFile = pickedDir.createFile("text/markdown", safeFileName) ?: return false

        contentResolver.openOutputStream(newFile.uri)?.use { out ->
            out.write(content.toByteArray())
        } ?: return false

        println("üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω —á–µ—Ä–µ–∑ SAF –≤: ${newFile.uri}")
        return true
    }

    private fun saveToFileCustomDir(dir: File, fileName: String, content: String): Boolean {
        return try {
            if (!dir.exists()) dir.mkdirs()
            val file = File(dir, fileName)
            file.writeText(content)
            println("üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ª–æ–∫–∞–ª—å–Ω–æ: ${file.absolutePath}")
            true
        } catch (e: Exception) {
            e.printStackTrace()
            false
        }
    }

    private fun getDownloadsDirectory(): File {
        return Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS)
    }
}
