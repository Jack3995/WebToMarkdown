package com.jack3995.webtomarkdown.util

import okhttp3.OkHttpClient
import okhttp3.Request
import java.io.File
import java.io.IOException
import java.net.URL
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

class ImageDownloader {

    private val client = OkHttpClient()

    data class ImageInfo(
        val originalUrl: String,
        val localPath: String,
        val fileName: String
    )

    /**
     * –°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
     */
    suspend fun downloadImage(
        imageUrl: String,
        targetFolder: File,
        fileName: String,
        folderName: String? = null
    ): Result<ImageInfo> = withContext(Dispatchers.IO) {
        try {
            println("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: $imageUrl")
            
            // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (!targetFolder.exists()) {
                targetFolder.mkdirs()
                println("üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${targetFolder.absolutePath}")
            }

            // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ URL
            val extension = getImageExtension(imageUrl)
            val fullFileName = if (fileName.contains(".")) fileName else "$fileName.$extension"
            val imageFile = File(targetFolder, fullFileName)

            println("üìÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª: ${imageFile.absolutePath}")

            // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            val request = Request.Builder().url(imageUrl).build()
            client.newCall(request).execute().use { response ->
                if (!response.isSuccessful) {
                    println("‚ùå HTTP –æ—à–∏–±–∫–∞ ${response.code} –¥–ª—è $imageUrl")
                    return@withContext Result.failure(IOException("–û—à–∏–±–∫–∞ HTTP ${response.code} –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ $imageUrl"))
                }

                val body = response.body
                if (body == null) {
                    println("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è $imageUrl")
                    return@withContext Result.failure(IOException("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ $imageUrl"))
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                val bytes = body.bytes()
                imageFile.writeBytes(bytes)
                println("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${bytes.size} –±–∞–π—Ç –≤ ${imageFile.name}")
            }

            val imageInfo = ImageInfo(
                originalUrl = imageUrl,
                localPath = if (folderName != null) "./$folderName/$fullFileName" else fullFileName, // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è Markdown
                fileName = fullFileName
            )

            println("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: ${imageInfo.fileName}")
            Result.success(imageInfo)
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è $imageUrl: ${e.message}")
            Result.failure(e)
        }
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private fun getImageExtension(url: String): String {
        return try {
            val urlObj = URL(url)
            val path = urlObj.path
            val lastDotIndex = path.lastIndexOf('.')
            if (lastDotIndex > 0) {
                path.substring(lastDotIndex + 1).lowercase()
            } else {
                "jpg" // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            }
        } catch (_: Exception) {
            "jpg" // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
     */
    fun isImageUrl(url: String): Boolean {
        val imageExtensions = listOf("jpg", "jpeg", "png", "gif", "bmp", "webp", "svg")
        val extension = getImageExtension(url).lowercase()
        return imageExtensions.contains(extension)
    }

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π
     */
    fun resolveImageUrl(baseUrl: String, imageUrl: String): String {
        return try {
            if (imageUrl.startsWith("http://") || imageUrl.startsWith("https://")) {
                imageUrl
            } else if (imageUrl.startsWith("//")) {
                "https:$imageUrl"
            } else if (imageUrl.startsWith("/")) {
                val base = URL(baseUrl)
                "${base.protocol}://${base.host}$imageUrl"
            } else {
                val base = URL(baseUrl)
                val basePath = base.path.substringBeforeLast("/")
                "${base.protocol}://${base.host}$basePath/$imageUrl"
            }
        } catch (_: Exception) {
            imageUrl
        }
    }
}
