package com.jack3995.webtomarkdown

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.result.contract.ActivityResultContracts
import androidx.activity.result.ActivityResultLauncher
import androidx.compose.runtime.*
import androidx.compose.runtime.saveable.rememberSaveable
import com.jack3995.webtomarkdown.screens.*
import com.jack3995.webtomarkdown.screens.FileNameOption
import com.jack3995.webtomarkdown.screens.SaveLocationOption
import com.jack3995.webtomarkdown.util.WebContentProcessor
import com.jack3995.webtomarkdown.util.FileSaveHandler
import kotlinx.coroutines.*
import androidx.compose.material3.ExperimentalMaterial3Api
import java.io.File
import java.text.SimpleDateFormat
import java.util.*

class MainActivity : ComponentActivity() {

    enum class Screen {
        Splash, Main, Settings
    }

    private val processor = WebContentProcessor()
    private lateinit var fileSaveHandler: FileSaveHandler
    private lateinit var folderPickerLauncher: ActivityResultLauncher<Uri?>

    private var fileNameInput by mutableStateOf("")
    private var notePreview by mutableStateOf("")
    private var urlState = mutableStateOf("")

    private var fileNameOption by mutableStateOf(FileNameOption.DEFAULT_NAME)
    private var saveLocationOption by mutableStateOf(SaveLocationOption.ASK_EVERY_TIME)
    private var lastCustomFolderUri by mutableStateOf<String?>(null)

    private var downloadImages by mutableStateOf(true)
    private var imagesFolder by mutableStateOf<File?>(null) // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ç–∏–ø–æ–º
    private var isLoading by mutableStateOf(false)

    private var currentScreen by mutableStateOf(Screen.Splash)
    private var savedFolderPath by mutableStateOf<String?>(null)
    
    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∞–ø–∫–∏
    private var pendingFileName by mutableStateOf("")
    private var pendingContent by mutableStateOf("")
    private var pendingImagesFolder by mutableStateOf<File?>(null)

    @OptIn(ExperimentalMaterial3Api::class)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        fileSaveHandler = FileSaveHandler(this, contentResolver)

        folderPickerLauncher = registerForActivityResult(ActivityResultContracts.OpenDocumentTree()) { uri ->
            lastCustomFolderUri = uri?.toString()
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            if (uri != null) {
                println("üìÅ –í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: $uri")
                println("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª: $pendingFileName")
                pendingImagesFolder?.let { folder ->
                    println("üñºÔ∏è –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${folder.absolutePath}")
                }
                
                fileSaveHandler.onFolderPicked(uri, pendingFileName, pendingContent, { success ->
                    if (!success) println("‚ùó –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ SAF")
                    else println("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —á–µ—Ä–µ–∑ SAF")
                }, pendingImagesFolder)
            } else {
                println("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
            }
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω—Ç–µ–Ω—Ç –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        handleSendIntent(intent)

        setContent {
            var _currentScreen by rememberSaveable { mutableStateOf(currentScreen) }
            var _savedFolderPath by rememberSaveable { mutableStateOf(savedFolderPath) }
            var _lastCustomFolderUri by rememberSaveable { mutableStateOf(lastCustomFolderUri) }

            val _urlState = remember { mutableStateOf(urlState.value) }
            var _fileNameOption by rememberSaveable { mutableStateOf(fileNameOption) }
            var _saveLocationOption by rememberSaveable { mutableStateOf(saveLocationOption) }
            var _notePreview by remember { mutableStateOf(notePreview) }
            var _fileNameInput by remember { mutableStateOf(fileNameInput) }
            var _downloadImages by remember { mutableStateOf(downloadImages) }
            var _imagesFolder by remember { mutableStateOf<File?>(imagesFolder) }
            var _isLoading by remember { mutableStateOf(isLoading) }

            fun clearFields() {
                _urlState.value = ""
                _fileNameInput = ""
                _notePreview = ""
            }

            fun getDefaultFileName(): String {
                val dateFormat = SimpleDateFormat("dd.MM.yyyy_HH.mm", Locale.getDefault())
                val currentDate = dateFormat.format(Date())
                return "–ó–∞–º–µ—Ç–∫–∞_$currentDate"
            }

            fun processUrl() {
                val url = _urlState.value.trim()
                if (url.isEmpty()) {
                    _notePreview = ""
                    _fileNameInput = ""
                    println("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ URL")
                    return
                }

                _isLoading = true
                _notePreview = ""

                CoroutineScope(Dispatchers.IO).launch {
                    val result = processor.processPage(url, _fileNameOption, _downloadImages)
                    withContext(Dispatchers.Main) {
                        _isLoading = false
                        if (result.isSuccess) {
                            val data = result.getOrThrow()
                            _notePreview = data.markdown
                            _fileNameInput = data.fileName
                            _imagesFolder = data.imagesFolder
                            if (data.imagesFolder != null) {
                                println("üìÅ –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${data.imagesFolder.name}")
                            }
                        } else {
                            _notePreview = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${result.exceptionOrNull()?.message}"
                            _fileNameInput = ""
                            _imagesFolder = null
                        }
                    }
                }
            }

            fun saveNote() {
                val fileName = _fileNameInput.ifBlank {
                    if (_fileNameOption == FileNameOption.DEFAULT_NAME) processor.getDefaultFileName()
                    else "page_${System.currentTimeMillis()}.md"
                }

                fileSaveHandler.lastCustomFolderUri = _lastCustomFolderUri

                println("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫—É: $fileName")
                _imagesFolder?.let { folder ->
                    println("üìÅ –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${folder.absolutePath}")
                    println("üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏: ${folder.listFiles()?.map { it.name } ?: "–ø—É—Å—Ç–æ"}")
                } ?: run {
                    println("‚ö†Ô∏è –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                }

                fileSaveHandler.saveNote(
                    fileName,
                    _notePreview,
                    _saveLocationOption,
                    onFolderPickerRequest = {
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∑–∞–º—ã–∫–∞–Ω–∏–∏
                        pendingFileName = fileName
                        pendingContent = _notePreview
                        pendingImagesFolder = _imagesFolder
                        
                        println("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏:")
                        println("   –§–∞–π–ª: $fileName")
                        println("   –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${_imagesFolder?.absolutePath ?: "–Ω–µ—Ç"}")
                        
                        folderPickerLauncher.launch(null)
                    },
                    onSaveResult = { success ->
                        if (!success) println("‚ùó –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏")
                        else println("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ/–æ—à–∏–±–∫–µ
                    },
                    imagesFolder = _imagesFolder
                )
            }

            LaunchedEffect(Unit) {
                delay(2000L)
                _currentScreen = Screen.Main
            }

            currentScreen = _currentScreen
            savedFolderPath = _savedFolderPath
            lastCustomFolderUri = _lastCustomFolderUri
            urlState.value = _urlState.value
            fileNameOption = _fileNameOption
            saveLocationOption = _saveLocationOption
            notePreview = _notePreview
            fileNameInput = _fileNameInput
            downloadImages = _downloadImages
            imagesFolder = _imagesFolder
            isLoading = _isLoading

            when (_currentScreen) {
                Screen.Splash -> SplashScreen()
                Screen.Main -> MainScreen(
                    urlState = _urlState.value,
                    onUrlChange = { _urlState.value = it },
                    onProcessClick = { processUrl() },
                    onSaveClick = { saveNote() },
                    onClearClick = { clearFields() },
                    onOpenSettings = { _currentScreen = Screen.Settings },
                    fileNameInput = _fileNameInput,
                    onFileNameInputChange = { _fileNameInput = it },
                    notePreview = _notePreview,
                    isLoading = _isLoading
                )
                Screen.Settings -> SettingsScreen(
                    initialPath = _savedFolderPath,
                    initialFileNameOption = _fileNameOption,
                    initialSaveLocationOption = _saveLocationOption,
                    initialDownloadImages = _downloadImages,
                    onSave = { _, path, option, locationOption, downloadImages ->
                        _savedFolderPath = path
                        _fileNameOption = option
                        _saveLocationOption = locationOption
                        _downloadImages = downloadImages
                        _currentScreen = Screen.Main
                        if (locationOption == SaveLocationOption.CUSTOM_FOLDER && !path.isNullOrBlank()) {
                            _lastCustomFolderUri = path
                        }
                    }
                )
            }
        }
    }

    override fun onNewIntent(intent: Intent) {
        super.onNewIntent(intent)
        handleSendIntent(intent)
    }

    private fun handleSendIntent(intent: Intent) {
        if (intent.action == Intent.ACTION_SEND && intent.type == "text/plain") {
            val sharedText = intent.getStringExtra(Intent.EXTRA_TEXT)
            if (!sharedText.isNullOrEmpty()) {
                Log.d("ShareIntent", "–ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: $sharedText")
                urlState.value = sharedText.trim()
                // –ú–æ–∂–Ω–æ —Ç—É—Ç –≤—ã–∑–≤–∞—Ç—å processUrl() –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏
            }
        }
    }
}
