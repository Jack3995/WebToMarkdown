package com.jack3995.webtomarkdown

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.util.Log
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.result.contract.ActivityResultContracts
import androidx.activity.result.ActivityResultLauncher
import androidx.compose.runtime.*
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.animation.*
import androidx.compose.animation.core.*
import com.jack3995.webtomarkdown.screens.*
import com.jack3995.webtomarkdown.screens.FileNameOption
import com.jack3995.webtomarkdown.screens.SaveLocationOption
import com.jack3995.webtomarkdown.screens.ThemeOption
import com.jack3995.webtomarkdown.util.WebContentProcessor
import com.jack3995.webtomarkdown.util.FileSaveHandler
import com.jack3995.webtomarkdown.util.SettingsManager
import com.jack3995.webtomarkdown.util.ThemeManager
import kotlinx.coroutines.*
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import java.io.File
import java.text.SimpleDateFormat
import java.util.*

/**
 * –ì–ª–∞–≤–Ω–∞—è Activity –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ,
 * —É–ø—Ä–∞–≤–ª—è–µ—Ç Compose-—ç–∫—Ä–∞–Ω–æ–º –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —É—Ç–∏–ª–∏—Ç—ã.
 */
class MainActivity : ComponentActivity() {

    enum class Screen {
        Splash, Main, Settings
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (HTML ‚Üí Markdown, –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
    private val processor = WebContentProcessor()

    // –°–µ—Ä–≤–∏—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ (—á–µ—Ä–µ–∑ SAF) –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    private lateinit var fileSaveHandler: FileSaveHandler

    // –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    private lateinit var settingsManager: SettingsManager

    // –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    private lateinit var themeManager: ThemeManager

    // –õ–∞—É–Ω—á–µ—Ä —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ (SAF)
    private lateinit var folderPickerLauncher: ActivityResultLauncher<Uri?>

    // –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—è Activity; —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –≤–Ω—É—Ç—Ä–∏ setContent
    private var fileNameInput by mutableStateOf("")          // –¢–µ–∫—É—â–µ–µ –∏–º—è —Ñ–∞–π–ª–∞
    private var notePreview by mutableStateOf("")            // Markdown –ø—Ä–µ–≤—å—é
    private var urlState = mutableStateOf("")                // –í–≤–µ–¥—ë–Ω–Ω—ã–π URL

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    private var fileNameOption by mutableStateOf(FileNameOption.DEFAULT_NAME)            // –ü—Ä–∞–≤–∏–ª–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    private var saveLocationOption by mutableStateOf(SaveLocationOption.ASK_EVERY_TIME)  // –ú–µ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    private var lastCustomFolderUri by mutableStateOf<String?>(null)                     // –ó–∞–ø–æ–º–Ω–µ–Ω–Ω—ã–π SAF URI

    private var downloadImages by mutableStateOf(true)       // –ó–∞–≥—Ä—É–∂–∞—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    private var usePatterns by mutableStateOf(true)          // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å–∞–π—Ç–æ–≤
    private var imagesFolder by mutableStateOf<File?>(null)  // –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    private var isLoading by mutableStateOf(false)           // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    private var themeOption by mutableStateOf(ThemeOption.SYSTEM) // –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø—É—Ç—å –ø–∞–ø–∫–∏
    private var currentScreen by mutableStateOf(Screen.Splash)
    private var savedFolderPath by mutableStateOf<String?>(null)

    // –ë—É—Ñ–µ—Ä –∑–Ω–∞—á–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ –≤ SAF
    private var pendingFileName by mutableStateOf("")
    private var pendingContent by mutableStateOf("")
    private var pendingImagesFolder by mutableStateOf<File?>(null)

    // –§–ª–∞–≥ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –∏–∑–≤–Ω–µ
    private var pendingAutoProcess: Boolean = false


    private fun handleSendIntent(intent: Intent) {
        if (intent.action == Intent.ACTION_SEND && intent.type == "text/plain") {
            val sharedText = intent.getStringExtra(Intent.EXTRA_TEXT)
            if (!sharedText.isNullOrEmpty()) {
                Log.d("ShareIntent", "–ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: $sharedText")
                urlState.value = sharedText.trim()
                // –û—Ç–º–µ—Ç–∏–º, —á—Ç–æ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UI
                pendingAutoProcess = true
            }
        }
    }

    @OptIn(ExperimentalMaterial3Api::class)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–µ–º
        themeManager = ThemeManager(this)

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –±–∞—Ä–æ–≤
        themeManager.setupSystemBars()

        fileSaveHandler = FileSaveHandler(this, contentResolver)
        settingsManager = SettingsManager(this)

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        fileNameOption = settingsManager.getFileNameOption()
        saveLocationOption = settingsManager.getSaveLocationOption()
        lastCustomFolderUri = settingsManager.getCustomFolderPath()
        downloadImages = settingsManager.getDownloadImages()
        usePatterns = settingsManager.getUsePatterns()
        themeOption = settingsManager.getThemeOption()
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –±–∞—Ä–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞)
        themeManager.updateSystemBarsColors(themeOption, false)

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Uri –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–∏–ª–∏ null).
        folderPickerLauncher =
            registerForActivityResult(ActivityResultContracts.OpenDocumentTree()) { uri ->
                lastCustomFolderUri = uri?.toString()
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                if (uri != null) {
                    settingsManager.saveCustomFolderPath(uri.toString())
                }

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
                if (uri != null) {
                    println("üìÅ MainActivity: –í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: $uri")
                    println("üíæ MainActivity: –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ FileSaveHandler –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –≤ FileSaveHandler
                    fileSaveHandler.onFolderPickedUsePending(uri) { success ->
                        if (!success) {
                            println("‚ùó MainActivity –ø–æ–ª—É—á–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ SAF")
                        } else {
                            println("‚úÖ MainActivity –ø–æ–ª—É—á–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —á–µ—Ä–µ–∑ SAF")
                            Toast.makeText(this@MainActivity, "–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", Toast.LENGTH_SHORT).show()
                        }
                    }
                } else {
                    println("‚ùå MainActivity: –ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
                }
            }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω—Ç–µ–Ω—Ç –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        handleSendIntent(intent)

        // –ó–∞–ø—É—Å–∫–∞–µ–º Compose UI –∏ —Å–≤—è–∑—ã–≤–∞–µ–º –µ–≥–æ —Å–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
        setContent {
            var _currentScreen by rememberSaveable { mutableStateOf(currentScreen) }
            var _savedFolderPath by rememberSaveable { mutableStateOf(settingsManager.getCustomFolderPath()) }
            var _lastCustomFolderUri by rememberSaveable { mutableStateOf(settingsManager.getCustomFolderPath()) }

            val _urlState = remember { mutableStateOf(urlState.value) }
            var _fileNameOption by rememberSaveable { mutableStateOf(settingsManager.getFileNameOption()) }
            var _saveLocationOption by rememberSaveable { mutableStateOf(settingsManager.getSaveLocationOption()) }
            var _notePreview by remember { mutableStateOf(notePreview) }
            var _fileNameInput by remember { mutableStateOf(fileNameInput) }
            var _downloadImages by rememberSaveable { mutableStateOf(settingsManager.getDownloadImages()) }
            var _usePatterns by rememberSaveable { mutableStateOf(settingsManager.getUsePatterns()) }
            var _imagesFolder by remember { mutableStateOf<File?>(imagesFolder) }   // –ü–∞–ø–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è UI
            var _originalUrl by remember { mutableStateOf("") }                    // –ò—Å—Ö–æ–¥–Ω—ã–π URL
            var _tempImagesFolder by remember { mutableStateOf<File?>(null) }       // –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            var _isLoading by remember { mutableStateOf(isLoading) }                 // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è UI
            var _themeOption by rememberSaveable { mutableStateOf(settingsManager.getThemeOption()) }
            val supportedDomains by remember { mutableStateOf(processor.getSupportedPatternDomains()) }
            val isSystemInDarkTheme = isSystemInDarkTheme()

            // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ –∏ –ø—Ä–µ–≤—å—é
            fun clearFields() {
                _urlState.value = ""
                _fileNameInput = ""
                _notePreview = ""
            }

            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–Ω–∞ —Å–ª—É—á–∞–π –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
            fun getDefaultFileName(): String {
                val dateFormat = SimpleDateFormat("dd.MM.yyyy_HH.mm", Locale.getDefault())
                val currentDate = dateFormat.format(Date())
                return "–ó–∞–º–µ—Ç–∫–∞_$currentDate"
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç URL: –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ WebContentProcessor
            fun processUrl() {
                val url = _urlState.value.trim()
                if (url.isEmpty()) {
                    _notePreview = ""
                    _fileNameInput = ""
                    println("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ URL")
                    return
                }

                _isLoading = true
                _notePreview = ""

                // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—è–∂—ë–ª–æ–π —Ä–∞–±–æ—Ç—ã –≤ IO, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI ‚Äî –Ω–∞ Main
                CoroutineScope(Dispatchers.IO).launch {
                    val result = processor.processPage(
                        url,
                        _fileNameOption,
                        _downloadImages,
                        _usePatterns,
                        _fileNameInput.takeIf { it.isNotBlank() })
                    withContext(Dispatchers.Main) {
                        _isLoading = false
                        if (result.isSuccess) {
                            val data = result.getOrThrow()
                            _notePreview = data.markdown
                            _fileNameInput = data.fileName
                            _originalUrl = url
                            _tempImagesFolder = data.tempImagesFolder

                            println("‚úÖ MainActivity: –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                            if (data.tempImagesFolder != null) {
                                println("üìÅ MainActivity: –ü–æ–ª—É—á–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${data.tempImagesFolder.name}")
                            } else {
                                println("‚ÑπÔ∏è MainActivity: –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)")
                            }
                        } else {
                            _notePreview =
                                "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${result.exceptionOrNull()?.message}"
                            _fileNameInput = ""
                            _originalUrl = ""
                            _tempImagesFolder = null
                            println("‚ùå MainActivity: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${result.exceptionOrNull()?.message}")
                        }
                    }
                }
            }

            // –î–µ–ª–µ–≥–∏—Ä—É–µ—Ç FileSaveHandler –ø–æ–ª–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            fun saveNote() {
                println("üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å! –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ FileSaveHandler")

                fileSaveHandler.lastCustomFolderUri = _lastCustomFolderUri

                // –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å—é –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ FileSaveHandler
                fileSaveHandler.saveNoteWithFullLogic(
                    fileName = _fileNameInput,
                    content = _notePreview,
                    saveLocationOption = _saveLocationOption,
                    fileNameOption = _fileNameOption,
                    downloadImages = _downloadImages,
                    usePatterns = _usePatterns,
                    originalUrl = _originalUrl,
                    tempImagesFolder = _tempImagesFolder,
                    onFolderPickerRequest = {
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ –≤ SAF
                        pendingFileName = _fileNameInput
                        pendingContent = _notePreview
                        pendingImagesFolder = _tempImagesFolder

                        println("üìÅ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–∞–ø–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                        folderPickerLauncher.launch(null)
                    },
                    onSaveResult = { success ->
                        if (!success) {
                            println("‚ùó MainActivity –ø–æ–ª—É—á–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                        } else {
                            println("‚úÖ MainActivity –ø–æ–ª—É—á–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –£—Å–ø–µ—à–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
                            Toast.makeText(this@MainActivity, "–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", Toast.LENGTH_SHORT).show()
                        }
                    }
                )
            }

            LaunchedEffect(Unit) {
                delay(2000L)
                _currentScreen = Screen.Main
            }

            // –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –ø—Ä–∏—à–ª–∞ —á–µ—Ä–µ–∑ Share-–∏–Ω—Ç–µ–Ω—Ç
            LaunchedEffect(_urlState.value) {
                if (pendingAutoProcess && _urlState.value.isNotBlank()) {
                    pendingAutoProcess = false
                    processUrl()
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –±–∞—Ä–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–º—ã
            LaunchedEffect(_themeOption, isSystemInDarkTheme) {
                themeManager.updateSystemBarsColors(_themeOption, isSystemInDarkTheme)
            }

            currentScreen = _currentScreen
            savedFolderPath = _savedFolderPath
            lastCustomFolderUri = _lastCustomFolderUri
            urlState.value = _urlState.value
            fileNameOption = _fileNameOption
            saveLocationOption = _saveLocationOption
            notePreview = _notePreview
            fileNameInput = _fileNameInput
            downloadImages = _downloadImages
            usePatterns = _usePatterns
            imagesFolder = _imagesFolder
            isLoading = _isLoading
            themeOption = _themeOption

            MaterialTheme(
                colorScheme = themeManager.getColorScheme(_themeOption, isSystemInDarkTheme)
            ) {
                AnimatedContent(
                    targetState = _currentScreen,
                    transitionSpec = {
                        slideInHorizontally(
                            initialOffsetX = { if (targetState > initialState) it else -it },
                            animationSpec = tween(300)
                        ) + fadeIn(animationSpec = tween(300)) togetherWith slideOutHorizontally(
                            targetOffsetX = { if (targetState > initialState) -it else it },
                            animationSpec = tween(300)
                        ) + fadeOut(animationSpec = tween(300))
                    },
                    label = "screen_transition"
                ) { screen ->
                    when (screen) {
                        Screen.Splash -> SplashScreen()
                        Screen.Main -> MainScreen(
                            urlState = _urlState.value,
                            onUrlChange = { _urlState.value = it },
                            onProcessClick = { processUrl() },
                            onSaveClick = { saveNote() },
                            onClearClick = { clearFields() },
                            onOpenSettings = { _currentScreen = Screen.Settings },
                            fileNameInput = _fileNameInput,
                            onFileNameInputChange = { _fileNameInput = it },
                            notePreview = _notePreview,
                            isLoading = _isLoading
                        )

                        Screen.Settings -> SettingsScreen(
                            initialPath = _savedFolderPath,
                            initialFileNameOption = _fileNameOption,
                            initialSaveLocationOption = _saveLocationOption,
                            initialDownloadImages = _downloadImages,
                            initialUsePatterns = _usePatterns,
                            initialThemeOption = _themeOption,
                            supportedDomains = supportedDomains,
                            onSave = { _, path, option, locationOption, downloadImages, usePatterns, themeOption ->
                                _savedFolderPath = path
                                _fileNameOption = option
                                _saveLocationOption = locationOption
                                _downloadImages = downloadImages
                                _usePatterns = usePatterns
                                _themeOption = themeOption

                                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ SharedPreferences
                                settingsManager.saveAllSettings(
                                    locationOption,
                                    path,
                                    option,
                                    downloadImages,
                                    usePatterns,
                                    themeOption
                                )

                                _currentScreen = Screen.Main
                                if (locationOption == SaveLocationOption.CUSTOM_FOLDER && !path.isNullOrBlank()) {
                                    _lastCustomFolderUri = path
                                }
                            }
                        )
                    }
                }
            }
        }
    }

    override fun onNewIntent(intent: Intent) {
        super.onNewIntent(intent)
        handleSendIntent(intent)
    }
}