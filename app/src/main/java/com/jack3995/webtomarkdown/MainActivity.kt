package com.jack3995.webtomarkdown

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.runtime.*
import androidx.compose.runtime.saveable.rememberSaveable
import com.jack3995.webtomarkdown.screens.MainScreen
import com.jack3995.webtomarkdown.screens.SettingsScreen
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import okhttp3.OkHttpClient
import okhttp3.Request
import org.jsoup.Jsoup
import java.io.File
import java.io.IOException

class MainActivity : ComponentActivity() {

    // –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    enum class Screen {
        Main,
        Settings
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        setContent {
            // –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
            var currentScreen by remember { mutableStateOf(Screen.Main) }
            // –ü—É—Ç—å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, nullable
            var savedFolderPath by rememberSaveable { mutableStateOf<String?>(null) }
            // –§–ª–∞–≥ "—Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –ª–∏ –∫–∞–∂–¥—ã–π —Ä–∞–∑"
            var askEveryTime by rememberSaveable { mutableStateOf(true) }
            // –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ URL, –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            val urlState = remember { mutableStateOf("") }

            // –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
            when (currentScreen) {
                Screen.Main -> MainScreen(
                    urlState = urlState.value,
                    onUrlChange = { urlState.value = it },
                    onSaveClick = {
                        if (urlState.value.isEmpty()) {
                            // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø–µ—á–∞—Ç—å –æ—à–∏–±–∫–∏ –ø—É—Å—Ç–æ–≥–æ URL
                            println("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ URL")
                        } else {
                            // –ù–∞—á–∞—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ markdown
                            startDownloadAndSave(urlState.value)
                        }
                    },
                    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–∫—Ä–∞–Ω—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
                    onOpenSettings = { currentScreen = Screen.Settings }
                )
                Screen.Settings -> SettingsScreen(
                    initialPath = savedFolderPath,
                    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É
                    onSave = { askEvery, path ->
                        askEveryTime = askEvery
                        savedFolderPath = path
                        currentScreen = Screen.Main
                    }
                )
            }
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–∫ markdown - –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
    private fun startDownloadAndSave(url: String) {
        println("**DEBUG**: startDownloadAndSave –∑–∞–ø—É—â–µ–Ω–∞")

        CoroutineScope(Dispatchers.IO).launch {
            println("**DEBUG**: –ö–æ—Ä—É—Ç–∏–Ω —Å—Ç–∞—Ä—Ç—É–µ—Ç")
            try {
                println("–ë—É–¥–µ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å: [$url]($url)")

                val html = downloadWebPage(url)
                val markdown = convertHtmlToMarkdown(html)
                println("**DEBUG**: Markdown —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω:\n$markdown")
                saveToFile("page_${System.currentTimeMillis()}.md", markdown)

                println("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
            } catch (e: Exception) {
                println("**ERROR**: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${e::class.java.name} ${e.message}")
                e.printStackTrace()
            }
        }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä–æ–∫—É content –≤ —Ñ–∞–π–ª —Å –∏–º–µ–Ω–µ–º fileName –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –ø–∞–ø–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    private fun saveToFile(fileName: String, content: String) {
        val dir = File(getExternalFilesDir(null), "WebToMarkdown")
        if (!dir.exists()) dir.mkdirs()

        val file = File(dir, fileName)
        file.writeText(content)
        println("üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${file.absolutePath}")
    }

    // –°–∫–∞—á–∏–≤–∞–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ URL (–≤ –∫–æ—Ä—É—Ç–∏–Ω–µ)
    private suspend fun downloadWebPage(url: String): String {
        val client = OkHttpClient()
        val request = Request.Builder().url(url).build()
        val response = client.newCall(request).execute()

        if (!response.isSuccessful) throw IOException("–û—à–∏–±–∫–∞ HTTP ${response.code}")

        return response.body?.string() ?: throw IOException("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç HTML –≤ markdown –∏—Å–ø–æ–ª—å–∑—É—è Jsoup
    private fun convertHtmlToMarkdown(html: String): String {
        return try {
            val doc = Jsoup.parse(html)
            doc.select("script, style, iframe, noscript").remove()
            val sb = StringBuilder()
            val body = doc.body()
            if (body != null) {
                for (element in body.children()) {
                    sb.append(elementToMarkdown(element))
                    sb.append("\n\n")
                }
            } else {
                sb.append("–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            }
            sb.toString().trim()
        } catch (e: Exception) {
            "–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: ${e.message}"
        }
    }

    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ HTML –≤ markdown
    private fun elementToMarkdown(element: org.jsoup.nodes.Element): String {
        return when (element.tagName().lowercase()) {
            "h1" -> "# ${element.text()}"
            "h2" -> "## ${element.text()}"
            "h3" -> "### ${element.text()}"
            "h4" -> "#### ${element.text()}"
            "h5" -> "##### ${element.text()}"
            "h6" -> "###### ${element.text()}"
            "p" -> element.text()
            "ul" -> element.children().joinToString("\n") { "- ${it.text()}" }
            "ol" -> element.children().mapIndexed { i, li -> "${i + 1}. ${li.text()}" }.joinToString("\n")
            "a" -> "[${element.text()}](${element.attr("href")})"
            "b", "strong" -> "**${element.text()}**"
            "i", "em" -> "*${element.text()}*"
            else -> if (element.children().isNotEmpty())
                element.children().joinToString("\n") { elementToMarkdown(it) }
            else
                element.text()
        }
    }
}
